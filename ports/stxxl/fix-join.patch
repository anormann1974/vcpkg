diff --git a/lib/io/request_queue_impl_worker.cpp b/lib/io/request_queue_impl_worker.cpp
index 6566e68f..dc774477 100644
--- a/lib/io/request_queue_impl_worker.cpp
+++ b/lib/io/request_queue_impl_worker.cpp
@@ -51,23 +51,8 @@ void request_queue_impl_worker::stop_thread(thread_type& t, state<thread_state>&
     s.set_to(TERMINATING);
     sem++;
 #if STXXL_STD_THREADS
-#if STXXL_MSVC >= 1700
-    // In the Visual C++ Runtime 2012 and 2013, there is a deadlock bug, which
-    // occurs when threads are joined after main() exits. Apparently, Microsoft
-    // thinks this is not a big issue. It has not been fixed in VC++RT 2013.
-    // https://connect.microsoft.com/VisualStudio/feedback/details/747145
-    //
-    // All STXXL threads are created by singletons, which are global variables
-    // that are deleted after main() exits. The fix applied here it to use
-    // std::thread::native_handle() and access the WINAPI to terminate the
-    // thread directly (after it finished handling its i/o requests).
-
-    WaitForSingleObject(t->native_handle(), INFINITE);
-    CloseHandle(t->native_handle());
-#else
     t->join();
     delete t;
-#endif
     t = NULL;
 #elif STXXL_BOOST_THREADS
     t->join();
